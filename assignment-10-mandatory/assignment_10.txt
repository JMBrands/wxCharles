Part 1
(a) The worst case scenario is when inputfile has a length of at least N^3,
    which means the function will execute completely, and write
    N^3 times, so O(N^3)

(b) In the worst case scenario inputfile will be at least L*M*N long,
    which means the function will execute completely, and take
    L*M*N operation, so O(LMN)

(c) In the worst case this doesn't find anything and increases i
    a total of text.length() times, so O(text.length())

(d) In the worstcase this doesn't find anything and increases i
    a total of strlen(text) times, so O(strlen(text))

(e) In the worst case x is a prime, which means the for loop runs
    sqrt(x)-2 times (technically static_cast<int>(sqrt(statix_cast<double>(x)))
    but this results in the same), so O(sqrt(x))

(f) This will run length times, meaning O(length)

(g) This will run length times or size(source) times, so O(length) or O(size(source))

(h) The outer loop will run n times and the inner loop will then run N times, 
    N is incremented in every outer loop and it starts at size(source), so O(n*(size(source)+0.5*n))

(i) There is no loop, so the function will run once, so O(1)

Part 4
insertion sort:
best: O(n), when the list is already sorted
worst: O(n^2), when the array is in the reverse order you want it
average: O(n^2), when the array is neither sorted or in reverse order

order impact: a lot, when the array is sorted, the complexity is O(n), but if the last few elements are not sorted,
the complexity will be O(n^2) because the small elements are put in the start of the array first, even if they are already sorted.

selection sort:
best: O(n^2), every case
worst: O(n^2), every case
average: O(n^2), every case

order impact: none, selection sort has a fixed complexity of O(n^2)

bubble sort:
best: O(n), when the list is already sorted
worst: O(n^2), when the array is in the reverse order you want it
average: O(n^2), when the array is neither sorted or in reverse order

order impact: a lot, if the array is nearly sorted, it will finish faster, unlike insertion sort,
the unsorted areas affect the complexity the same in every part of the array.

heap sort:
best: O(nlog(n)), every case
worst: O(nlog(n)), every case
average: O(nlog(n)), every case

order impact: none, heap sort has a fixed complexity of O(nlog(n))
